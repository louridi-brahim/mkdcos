#!/usr/bin/env python3
"""
Script de tri du contenu WordPress

Ce script utilise le fichier tri.csv pour copier les articles WordPress
depuis le r√©pertoire source vers le r√©pertoire de destination appropri√©.

Colonne C : r√©pertoire de d√©part (√† partir de wordpress-content-to-sort)
Colonne D : r√©pertoire de destination
"""

import csv
import os
import re
import shutil
import sys
import unicodedata
from pathlib import Path


def nettoyer_titre_pour_fichier(titre):
    """
    Convertit un titre d'article en nom de fichier valide
    
    Args:
        titre (str): Titre de l'article
        
    Returns:
        str: Nom de fichier nettoy√© et valide
    """
    if not titre:
        return "article_sans_titre"
    
    # Supprime ou remplace les caract√®res probl√©matiques
    # Normalise les caract√®res Unicode (supprime les accents)
    titre_normalise = unicodedata.normalize('NFD', titre)
    titre_ascii = ''.join(c for c in titre_normalise if unicodedata.category(c) != 'Mn')
    
    # Remplace les caract√®res sp√©ciaux par des tirets
    titre_nettoye = re.sub(r'[^\w\s-]', '', titre_ascii)
    
    # Remplace les espaces et multiples tirets par un seul tiret
    titre_nettoye = re.sub(r'[-\s]+', '-', titre_nettoye)
    
    # Supprime les tirets en d√©but et fin
    titre_nettoye = titre_nettoye.strip('-')
    
    # Limite la longueur (max 100 caract√®res pour √©viter les probl√®mes de syst√®me de fichiers)
    if len(titre_nettoye) > 100:
        titre_nettoye = titre_nettoye[:100].rstrip('-')
    
    # Convertit en minuscules
    titre_nettoye = titre_nettoye.lower()
    
    # S'assure qu'on a au moins quelque chose
    if not titre_nettoye:
        return "article_sans_titre"
    
    return titre_nettoye


def lire_fichier_tri(fichier_csv):
    """
    Lit le fichier tri.csv et retourne la liste des op√©rations de tri
    
    Args:
        fichier_csv (str): Chemin vers le fichier tri.csv
        
    Returns:
        list: Liste de dictionnaires contenant les informations de tri
    """
    operations = []
    
    try:
        with open(fichier_csv, 'r', encoding='utf-8') as f:
            lecteur = csv.DictReader(f)
            for ligne in lecteur:
                # Utilise les noms des colonnes du CSV
                operation = {
                    'titre': ligne.get('Titre', ''),
                    'chemin_actuel': ligne.get('Chemin actuel', ''),
                    'repertoire_export': ligne.get('R√©pertoire d\'export', ''),
                    'destination': ligne.get('Destination ', '')  # Note l'espace apr√®s Destination
                }
                
                # V√©rifie que les colonnes importantes ne sont pas vides
                if operation['repertoire_export'] and operation['destination']:
                    operations.append(operation)
                    
    except FileNotFoundError:
        print(f"‚ùå Erreur : Le fichier {fichier_csv} n'a pas √©t√© trouv√©.")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Erreur lors de la lecture du fichier CSV : {e}")
        sys.exit(1)
        
    return operations


def creer_repertoires_destination(chemin_destination):
    """
    Cr√©e tous les r√©pertoires n√©cessaires pour le chemin de destination
    
    Args:
        chemin_destination (str): Chemin vers le r√©pertoire de destination
    """
    try:
        Path(chemin_destination).mkdir(parents=True, exist_ok=True)
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du r√©pertoire {chemin_destination} : {e}")
        return False


def copier_contenu(source, repertoire_destination, nouveau_nom=None):
    """
    Copie le contenu depuis la source vers la destination avec possibilit√© de renommage
    
    Args:
        source (str): Chemin source
        repertoire_destination (str): R√©pertoire de destination
        nouveau_nom (str, optional): Nouveau nom pour le fichier/dossier copi√©
        
    Returns:
        tuple: (bool, str) - (succ√®s, chemin_destination_final)
    """
    try:
        if not os.path.exists(source):
            print(f"‚ö†Ô∏è  Source inexistante : {source}")
            return False, ""
        
        # D√©termine le nom final du fichier/dossier
        if nouveau_nom:
            nom_final = nouveau_nom
        else:
            nom_final = os.path.basename(source)
        
        # Construit le chemin de destination complet
        destination_complete = os.path.join(repertoire_destination, nom_final)
        
        if os.path.isfile(source):
            # Si c'est un fichier, on le copie
            shutil.copy2(source, destination_complete)
            return True, destination_complete
            
        elif os.path.isdir(source):
            # Si c'est un r√©pertoire, on copie tout le contenu
            if os.path.exists(destination_complete):
                shutil.rmtree(destination_complete)
            shutil.copytree(source, destination_complete)
            return True, destination_complete
            
        else:
            print(f"‚ö†Ô∏è  Type de source non support√© : {source}")
            return False, ""
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la copie de {source} vers {repertoire_destination} : {e}")
        return False, ""


def trier_contenu_wordpress(repertoire_base="wordpress-content-to-sort", fichier_csv="tri.csv", mode_simulation=False):
    """
    Fonction principale pour trier le contenu WordPress
    
    Args:
        repertoire_base (str): R√©pertoire de base contenant le contenu WordPress
        fichier_csv (str): Fichier CSV contenant les instructions de tri
        mode_simulation (bool): Si True, affiche seulement ce qui serait fait sans l'ex√©cuter
    """
    print("üöÄ D√©marrage du script de tri du contenu WordPress")
    print("=" * 60)
    
    # V√©rification de l'existence du r√©pertoire de base
    if not os.path.exists(repertoire_base):
        print(f"‚ùå Erreur : Le r√©pertoire de base '{repertoire_base}' n'existe pas.")
        print(f"   Veuillez cr√©er ce r√©pertoire ou modifier le chemin dans le script.")
        sys.exit(1)
    
    # Lecture du fichier de tri
    print(f"üìñ Lecture du fichier de tri : {fichier_csv}")
    operations = lire_fichier_tri(fichier_csv)
    print(f"‚úÖ {len(operations)} op√©rations de tri trouv√©es\n")
    
    # Statistiques
    nb_reussites = 0
    nb_echecs = 0
    
    # Traitement de chaque op√©ration
    for i, operation in enumerate(operations, 1):
        titre = operation['titre']
        repertoire_source = operation['repertoire_export']
        repertoire_dest = operation['destination']
        
        # G√©n√®re le nom de fichier bas√© sur le titre
        nom_fichier_final = nettoyer_titre_pour_fichier(titre)
        
        print(f"üìÅ [{i}/{len(operations)}] Traitement : {titre}")
        print(f"   Source : {repertoire_source}")
        print(f"   Destination : {repertoire_dest}")
        print(f"   Nom final : {nom_fichier_final}")
        
        # Construction des chemins complets
        chemin_source = os.path.join(repertoire_base, repertoire_source)
        
        if mode_simulation:
            chemin_dest_final = os.path.join(repertoire_dest, nom_fichier_final)
            print(f"   üîç SIMULATION - Copierait depuis {chemin_source} vers {chemin_dest_final}")
            if os.path.exists(chemin_source):
                nb_reussites += 1
                print("   ‚úÖ Source existe - op√©ration serait r√©ussie")
            else:
                nb_echecs += 1
                print("   ‚ùå Source inexistante - op√©ration √©chouerait")
        else:
            # Cr√©ation du r√©pertoire de destination
            if creer_repertoires_destination(repertoire_dest):
                # Copie du contenu avec le nouveau nom
                succes, chemin_dest_final = copier_contenu(chemin_source, repertoire_dest, nom_fichier_final)
                
                if succes:
                    nb_reussites += 1
                    print(f"   ‚úÖ Copie r√©ussie vers {chemin_dest_final}")
                else:
                    nb_echecs += 1
            else:
                nb_echecs += 1
        
        print()  # Ligne vide pour la lisibilit√©
    
    # R√©sum√© final
    print("=" * 60)
    print("üìä R√âSUM√â DES OP√âRATIONS")
    print(f"‚úÖ R√©ussites : {nb_reussites}")
    print(f"‚ùå √âchecs : {nb_echecs}")
    print(f"üìà Total trait√© : {len(operations)}")
    
    if mode_simulation:
        print("\nüîç Mode simulation activ√© - aucune op√©ration r√©elle effectu√©e")
        print("   Pour ex√©cuter r√©ellement, relancez le script sans '--simulation'")
    else:
        if nb_echecs == 0:
            print("\nüéâ Toutes les op√©rations ont √©t√© effectu√©es avec succ√®s !")
        else:
            print(f"\n‚ö†Ô∏è  {nb_echecs} op√©ration(s) ont √©chou√©. V√©rifiez les messages d'erreur ci-dessus.")


def main():
    """Fonction principale du script"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Script de tri du contenu WordPress")
    parser.add_argument("--repertoire-base", "-r", 
                       default="wordpress-content-to-sort",
                       help="R√©pertoire de base contenant le contenu WordPress (d√©faut: wordpress-content-to-sort)")
    parser.add_argument("--fichier-csv", "-f",
                       default="tri.csv", 
                       help="Fichier CSV contenant les instructions de tri (d√©faut: tri.csv)")
    parser.add_argument("--simulation", "-s",
                       action="store_true",
                       help="Mode simulation : affiche ce qui serait fait sans l'ex√©cuter")
    
    args = parser.parse_args()
    
    trier_contenu_wordpress(
        repertoire_base=args.repertoire_base,
        fichier_csv=args.fichier_csv,
        mode_simulation=args.simulation
    )


if __name__ == "__main__":
    main()

